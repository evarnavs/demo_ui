{"uid":"25cdf2e2ce2b9aa","name":"Full login flow works","fullName":"tests.test_login_flow#test_full_login_flow","historyId":"28e39244bbf49167b64eceae175389af","time":{"start":1746611599014,"stop":1746611614638,"duration":15624},"description":"Test checks that user can login after selecting country and language","descriptionHtml":"<p>Test checks that user can login after selecting country and language</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a45578a416530bfd8872c7fbcbafe661\")>\nbase_url = 'https://staging.usupport.online'\n\n    @pytest.mark.usefixtures(\"browser\", \"base_url\")\n    @allure.title(\"Full login flow works\")\n    @allure.description(\"Test checks that user can login after selecting country and language\")\n    def test_full_login_flow(browser, base_url):\n        # Load credentials from environment\n        email = os.getenv(\"EMAIL\")\n        password = os.getenv(\"PASSWORD\")\n    \n        if not email or not password:\n            pytest.fail(\"EMAIL or PASSWORD environment variable is missing.\")\n    \n        # Pre-login country/language selection\n        pre_login = PreLoginPage(browser, base_url)\n        pre_login.open()\n        pre_login.accept_cookies_if_present()\n        pre_login.select_country(\"Kazakhstan (Қазақстан)\")\n        pre_login.select_language(\"English\")\n        pre_login.continue_to_login()\n    \n        # Login\n        login_page = LoginPage(browser)\n        login_page.click_login_with_email_button()\n        login_page.enter_email(email)\n        login_page.enter_password(password)\n        login_page.submit()\n    \n        # Verification\n>       assert login_page.is_logged_in(), \"Login verification failed.\"\n\ntests/test_login_flow.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:32: in is_logged_in\n    self.wait.until(EC.url_contains(\"/dashboard\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a45578a416530bfd8872c7fbcbafe661\")>\nmethod = <function url_contains.<locals>._predicate at 0x7ff2db0e60c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1746611597577,"stop":1746611599013,"duration":1436},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746611599013,"stop":1746611599013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test checks that user can login after selecting country and language","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a45578a416530bfd8872c7fbcbafe661\")>\nbase_url = 'https://staging.usupport.online'\n\n    @pytest.mark.usefixtures(\"browser\", \"base_url\")\n    @allure.title(\"Full login flow works\")\n    @allure.description(\"Test checks that user can login after selecting country and language\")\n    def test_full_login_flow(browser, base_url):\n        # Load credentials from environment\n        email = os.getenv(\"EMAIL\")\n        password = os.getenv(\"PASSWORD\")\n    \n        if not email or not password:\n            pytest.fail(\"EMAIL or PASSWORD environment variable is missing.\")\n    \n        # Pre-login country/language selection\n        pre_login = PreLoginPage(browser, base_url)\n        pre_login.open()\n        pre_login.accept_cookies_if_present()\n        pre_login.select_country(\"Kazakhstan (Қазақстан)\")\n        pre_login.select_language(\"English\")\n        pre_login.continue_to_login()\n    \n        # Login\n        login_page = LoginPage(browser)\n        login_page.click_login_with_email_button()\n        login_page.enter_email(email)\n        login_page.enter_password(password)\n        login_page.submit()\n    \n        # Verification\n>       assert login_page.is_logged_in(), \"Login verification failed.\"\n\ntests/test_login_flow.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:32: in is_logged_in\n    self.wait.until(EC.url_contains(\"/dashboard\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a45578a416530bfd8872c7fbcbafe661\")>\nmethod = <function url_contains.<locals>._predicate at 0x7ff2db0e60c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click 'Login with Email' button","time":{"start":1746611603128,"stop":1746611603796,"duration":668},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enter email","time":{"start":1746611603796,"stop":1746611604444,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"email","value":"'cometechu+6@gmail.com'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Enter password","time":{"start":1746611604445,"stop":1746611604494,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"password","value":"'q12432'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Click 'Login' button ","time":{"start":1746611604494,"stop":1746611604560,"duration":66},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Check if user redirected to dashboard","time":{"start":1746611604561,"stop":1746611614637,"duration":10076},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/demo_ui/demo_ui/pages/login_page.py\", line 32, in is_logged_in\n    self.wait.until(EC.url_contains(\"/dashboard\"))\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1746611614671,"stop":1746611614735,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('browser', 'base_url')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_flow"},{"name":"host","value":"fv-az1970-755"},{"name":"thread","value":"3312-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"e5aae04446f84ac8","status":"passed","time":{"start":1746610536201,"stop":1746610545620,"duration":9419}},{"uid":"1f6d11ed22fcd021","status":"passed","time":{"start":1746610208279,"stop":1746610216077,"duration":7798}},{"uid":"4ca0c76e07e1a072","status":"passed","time":{"start":1746610020991,"stop":1746610028941,"duration":7950}},{"uid":"77d4cb29060ae54b","status":"passed","time":{"start":1746550996958,"stop":1746551003571,"duration":6613}}]},"tags":["@pytest.mark.usefixtures('browser', 'base_url')"]},"source":"25cdf2e2ce2b9aa.json","parameterValues":[]}