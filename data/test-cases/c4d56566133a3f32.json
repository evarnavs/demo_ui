{"uid":"c4d56566133a3f32","name":"Full login flow works","fullName":"tests.test_login_flow#test_full_login_flow","historyId":"28e39244bbf49167b64eceae175389af","time":{"start":1747903379834,"stop":1747903391043,"duration":11209},"description":"Test checks that user can login after selecting country and language","descriptionHtml":"<p>Test checks that user can login after selecting country and language</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"text\">...</p> is not clickable at point (636, 702). Other element would receive the click: <div class=\"cookie-banner\">...</div>\n  (Session info: chrome=136.0.7103.92)\nStacktrace:\n#0 0x55b6c933871a <unknown>\n#1 0x55b6c8ddb0a0 <unknown>\n#2 0x55b6c8e3384c <unknown>\n#3 0x55b6c8e316ac <unknown>\n#4 0x55b6c8e2ed42 <unknown>\n#5 0x55b6c8e2e440 <unknown>\n#6 0x55b6c8e20b9d <unknown>\n#7 0x55b6c8e523a2 <unknown>\n#8 0x55b6c8e2051a <unknown>\n#9 0x55b6c8e5256e <unknown>\n#10 0x55b6c8e782a0 <unknown>\n#11 0x55b6c8e52173 <unknown>\n#12 0x55b6c8e1ed4b <unknown>\n#13 0x55b6c8e1f9b1 <unknown>\n#14 0x55b6c92fd8cb <unknown>\n#15 0x55b6c93017ca <unknown>\n#16 0x55b6c92e5622 <unknown>\n#17 0x55b6c9302354 <unknown>\n#18 0x55b6c92ca45f <unknown>\n#19 0x55b6c93264f8 <unknown>\n#20 0x55b6c93266d6 <unknown>\n#21 0x55b6c9337586 <unknown>\n#22 0x7f7bc2a9caa4 <unknown>\n#23 0x7f7bc2b29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6d9901ad4e5d0ccd64e9c38049e5084c\")>\nbase_url = 'https://staging.usupport.online'\n\n    @pytest.mark.usefixtures(\"browser\", \"base_url\")\n    @allure.title(\"Full login flow works\")\n    @allure.description(\"Test checks that user can login after selecting country and language\")\n    def test_full_login_flow(browser, base_url):\n        # Load credentials from environment\n        email = os.getenv(\"EMAIL\")\n        password = os.getenv(\"PASSWORD\")\n    \n        if not email or not password:\n            pytest.fail(\"EMAIL or PASSWORD environment variable is missing.\")\n    \n        # Pre-login country/language selection\n        pre_login = PreLoginPage(browser, base_url)\n        pre_login.open()\n        pre_login.accept_cookies_if_present()\n        pre_login.select_country(\"Kazakhstan (Қазақстан)\")\n>       pre_login.select_language(\"English\")\n\ntests/test_login_flow.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/pre_login_page.py:46: in select_language\n    trigger.click()\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f691bbaed10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x55b6c9337586 \\\\u003Cunknown>\\\\n#22 0x7f7bc2a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f7bc2b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"text\">...</p> is not clickable at point (636, 702). Other element would receive the click: <div class=\"cookie-banner\">...</div>\nE         (Session info: chrome=136.0.7103.92)\nE       Stacktrace:\nE       #0 0x55b6c933871a <unknown>\nE       #1 0x55b6c8ddb0a0 <unknown>\nE       #2 0x55b6c8e3384c <unknown>\nE       #3 0x55b6c8e316ac <unknown>\nE       #4 0x55b6c8e2ed42 <unknown>\nE       #5 0x55b6c8e2e440 <unknown>\nE       #6 0x55b6c8e20b9d <unknown>\nE       #7 0x55b6c8e523a2 <unknown>\nE       #8 0x55b6c8e2051a <unknown>\nE       #9 0x55b6c8e5256e <unknown>\nE       #10 0x55b6c8e782a0 <unknown>\nE       #11 0x55b6c8e52173 <unknown>\nE       #12 0x55b6c8e1ed4b <unknown>\nE       #13 0x55b6c8e1f9b1 <unknown>\nE       #14 0x55b6c92fd8cb <unknown>\nE       #15 0x55b6c93017ca <unknown>\nE       #16 0x55b6c92e5622 <unknown>\nE       #17 0x55b6c9302354 <unknown>\nE       #18 0x55b6c92ca45f <unknown>\nE       #19 0x55b6c93264f8 <unknown>\nE       #20 0x55b6c93266d6 <unknown>\nE       #21 0x55b6c9337586 <unknown>\nE       #22 0x7f7bc2a9caa4 <unknown>\nE       #23 0x7f7bc2b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1747903370983,"stop":1747903379833,"duration":8850},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1747903379833,"stop":1747903379833,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"browser::0","time":{"start":1747903392907,"stop":1747903392971,"duration":64},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('browser', 'base_url')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_flow"},{"name":"host","value":"fv-az1374-222"},{"name":"thread","value":"3403-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_flow"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":7,"unknown":0,"total":9},"items":[{"uid":"7688088b0e3d942a","status":"passed","time":{"start":1746618743575,"stop":1746618751749,"duration":8174}},{"uid":"e8e9675c7e4a915f","status":"passed","time":{"start":1746612944561,"stop":1746612955165,"duration":10604}},{"uid":"572e0684694d7cb9","status":"passed","time":{"start":1746612116490,"stop":1746612124220,"duration":7730}},{"uid":"25cdf2e2ce2b9aa","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1746611599014,"stop":1746611614638,"duration":15624}},{"uid":"e5aae04446f84ac8","status":"passed","time":{"start":1746610536201,"stop":1746610545620,"duration":9419}},{"uid":"1f6d11ed22fcd021","status":"passed","time":{"start":1746610208279,"stop":1746610216077,"duration":7798}},{"uid":"4ca0c76e07e1a072","status":"passed","time":{"start":1746610020991,"stop":1746610028941,"duration":7950}},{"uid":"77d4cb29060ae54b","status":"passed","time":{"start":1746550996958,"stop":1746551003571,"duration":6613}}]},"tags":["@pytest.mark.usefixtures('browser', 'base_url')"]},"source":"c4d56566133a3f32.json","parameterValues":[]}